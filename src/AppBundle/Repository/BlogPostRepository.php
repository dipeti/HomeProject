<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * BlogPostRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class BlogPostRepository extends EntityRepository
{

    public function add($post)
    {
        $em = $this->getEntityManager();
        $em->persist($post);
        $em->flush();
        return $em->getConnection()->lastInsertId();
    }
    public function findByQuery($query)
    {
        return $this->createQueryBuilder('b')
            ->orWhere(
                'b._title LIKE :query',
                'b._content LIKE :query',
                'b._tags LIKE :query',
                'b._author = :query_exact'
            )
            ->orderBy('b._postedAt', 'DESC')
            ->setParameters([
                'query'=>"%".$query."%",
                'query_exact' => $query
            ])
            ->getQuery()
            ->getResult();
    }

    /**
     * @return Paginator
     */
    public function findAllDesc()
    {
        $query = $this->createQueryBuilder('p')
            ->select('p')
            ->orderBy('p._postedAt','desc');
        return new Paginator($query);
  }

    public function findAllTags()
    {
        $arr = $this->createQueryBuilder('b')
            ->distinct(true)
            ->select('b._tags')
            ->getQuery()
            ->getArrayResult();

        $result = array();
        $iterator = new \RecursiveIteratorIterator(new \RecursiveArrayIterator($arr));
        foreach ($iterator as $value) {
            $result[] = $value;
        }
        $result = array_unique($result);
        shuffle($result);
        return $result;
    }
    public function findBySlug($slug){
       return $this->findOneBy(['_slug' => $slug]);
    }



}
